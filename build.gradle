/*
 * Copyright (C) 2015-2016 KeepSafe Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "com.github.ben-manes.versions" version "0.29.0"
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.dokka" version "0.10.0"
    id "groovy"
    id "com.microsoft.thrifty" version "2.1.1"
    id "java-gradle-plugin"
    id "com.vanniktech.maven.publish" version "0.12.0"
    id "com.gradle.plugin-publish" version "0.12.0"
}

group = GROUP
version = VERSION_NAME

sourceCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    integrationTest
}

configurations {
    integrationTestImplementation {
        extendsFrom testImplementation
    }

    additionalPluginClasspath
}

jar {
    manifest {
        attributes(
                "Implementation-Title": POM_ARTIFACT_ID,
                "Implementation-Version": VERSION_NAME)
    }
}

dokka {
    outputFormat = "html"
    outputDirectory = "${project.buildDir}/dokka"
}

repositories {
    mavenLocal()
    gradlePluginPortal()
    google()
}

def agpVersion = "4.2.0-beta02"
dependencies {
    implementation platform("org.jetbrains.kotlin:kotlin-bom")
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "org.javassist:javassist:3.27.0-GA"
    implementation "com.microsoft.thrifty:thrifty-runtime-ktx:2.1.1"

    compileOnly "com.android.tools.build:gradle:$agpVersion"
    additionalPluginClasspath "com.android.tools.build:gradle:$agpVersion"

    testImplementation "org.codehaus.groovy:groovy-all:2.5.13"
    testImplementation "com.android.tools.build:gradle:$agpVersion"
    testImplementation dependencies.create("org.spockframework:spock-core:1.3-groovy-2.5") {
        exclude module: "groovy-all"
    }
}

tasks {
    pluginUnderTestMetadata {
        pluginClasspath.from(configurations.additionalPluginClasspath)
    }
}

thrifty {
    kotlin {
        builderlessDataClasses true
    }
}

def installForTesting = tasks.register("installForIntegrationTests") { t ->
    t.dependsOn "publishToMavenLocal"
}

def integrationTest = tasks.register("integrationTest", Test) { t ->
    t.dependsOn installForTesting
    t.mustRunAfter tasks.named("test")

    t.group "verification"
    t.description "Runs integration tests."

    t.testClassesDirs = sourceSets.integrationTest.output.classesDirs
    t.classpath = sourceSets.integrationTest.runtimeClasspath

    // Workaround for https://github.com/gradle/gradle/issues/4506#issuecomment-570815277
    t.systemProperty("org.gradle.testkit.dir", file("${buildDir}/tmp/.test-kit"))

    t.jvmArgs(
        "-XX:+HeapDumpOnOutOfMemoryError", "-XX:GCTimeLimit=20", "-XX:GCHeapFreeLimit=10",
        "-XX:MaxMetaspaceSize=1g"
    )

    t.beforeTest { testCase ->
        logger.lifecycle("Running test: $testCase")
    }
}

tasks.named("check").configure { t ->
    t.dependsOn integrationTest
}

tasks.register("publishEverywhere") { t ->
    t.group "publishing"
    t.description "Publish to Maven Central and the Gradle Plugin Portal"

    t.dependsOn("uploadArchives", "publishPlugins")
}

// Compiler settings

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:all"            // Turn on all warnings
        compilerArgs << "-Xlint:-options"       // Turn off "missing" bootclasspath warning
        compilerArgs << "-Werror"               // Turn warnings into errors
        encoding = "utf-8"
        fork = true
    }
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:all"            // Turn on all warnings
        compilerArgs << "-Xlint:-options"       // Turn off "missing" bootclasspath warning
        compilerArgs << "-Werror"               // Turn warnings into errors
        incremental = true
        encoding = "utf-8"
        fork = true
    }

    configure(groovyOptions) {
        encoding = "utf-8"
        fork = true
    }
}

// Don't fork too much on CI - it tends to run out of metaspace memory.
def isCi = providers.environmentVariable("CI").forUseAtConfigurationTime().isPresent()

tasks.withType(Test) {
    // Turn on logging for all tests, filter to show failures/skips only
    testLogging {
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        events "failed", "skipped"
    }

    failFast = true
    maxParallelForks = isCi ? 1 : Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        // Disabling until there's some workaround for the warning
        // about AGP's builder.jar containing its own bundled Kotlin
        // runtime library.
        allWarningsAsErrors = false
    }
}

tasks.withType(Javadoc) {
    title = "${project.name} ${project.version}"
    configure(options) {
        header = project.name
        encoding "UTF-8"
        docEncoding "UTF-8"
        charSet "UTF-8"
        linkSource true
        author = true
        links("http://docs.oracle.com/javase/8/docs/api/",
            "http://docs.oracle.com/javaee/7/api/")
        exclude "**/*Test.java"
        if (JavaVersion.current().java8Compatible) addStringOption("Xdoclint:none", "-quiet")
    }
}

tasks.withType(Groovydoc) {
    docTitle = "${project.name} ${project.version}"
    header = project.name
    link("http://docs.oracle.com/javase/8/docs/api/",
        "http://docs.oracle.com/javaee/7/api/",
        "http://groovy.codehaus.org/gapi/")
    exclude "**/*Spec.java"
}

// Plugin Portal publishing

gradlePlugin {
    plugins {
        dexcount {
            id = "com.getkeepsafe.dexcount"
            implementationClass = "com.getkeepsafe.dexcount.DexMethodCountPlugin"
        }
    }
}

pluginBundle {
    website = POM_URL
    vcsUrl = POM_SCM_URL
    description = POM_DESCRIPTION
    tags = ['android', 'dex', 'method count']

    plugins {
        dexcount {
            id = "com.getkeepsafe.dexcount"
            displayName = POM_NAME
        }
    }

    mavenCoordinates {
        groupId = GROUP
        artifactId = POM_ARTIFACT_ID
        version = VERSION_NAME
    }
}

// Convenient entrypoint for the "upload snapshot" CI action.
// It's easier to do the version check here than in a Github action.
def isSnapshot = providers.gradleProperty("VERSION_NAME").forUseAtConfigurationTime().map { it.endsWith("-SNAPSHOT") }
tasks.register("uploadSnapshot") {
    if (isSnapshot.get()) {
        dependsOn("uploadArchives")
    } else {
        doFirst {
            logger.lifecycle("Skipping upload of non-snapshot version '{}'", VERSION_NAME)
        }
    }
}

wrapper {
    gradleVersion = "6.6"
}
