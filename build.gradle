/*
 * Copyright (C) 2015-2016 KeepSafe Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    apply from: "gradle/dependencies.gradle"

    repositories {
        gradlePluginPortal()
        google()
    }

    dependencies {
        classpath deps.gradleVersionsPlugin
        classpath deps.kotlinGradlePlugin
    }
}

plugins {
    id "com.gradle.plugin-publish" version "0.10.0"
}

allprojects {
    repositories {
        mavenLocal()
        gradlePluginPortal()
        google()
    }
}

apply plugin: "com.github.ben-manes.versions"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "groovy"
apply plugin: "java-gradle-plugin"

sourceCompatibility = rootProject.ext.javaVersion

group = GROUP
version = VERSION_NAME

jar {
    manifest {
        attributes(
                "Implementation-Title": POM_ARTIFACT_ID,
                "Implementation-Version": VERSION_NAME)
    }
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if (details.requested.group == "org.jetbrains.kotlin") {
                details.useVersion rootProject.ext.kotlinVersion
            }
        }
    }
}

task createClasspathManifest() {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        // Combine both main and test plugin classpaths
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n') + '\n' + sourceSets.test.runtimeClasspath.join('\n')
    }
}

dependencies {
    implementation deps.kotlinStdlib
    implementation deps.gson

    compileOnly deps.gradle

    testRuntimeOnly files(createClasspathManifest)

    testImplementation localGroovy()
    testImplementation deps.gradle
    testImplementation deps.junit
    testImplementation deps.spockCore, { exclude module: "groovy-all" } // Use localGroovy()
}

apply from: "gradle/gradle-mvn-push.gradle"
apply from: "gradle/compile.gradle"
apply from: "gradle/gradle-plugin-portal.gradle"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        // Disabling until there's some workaround for the warning
        // about AGP's builder.jar containing its own bundled Kotlin
        // runtime library.
        allWarningsAsErrors = false
    }
}
