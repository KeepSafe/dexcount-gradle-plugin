{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dexcount Gradle Plugin A Gradle plugin to report the number of method references in your APK, AAR, or java module on every build. This helps you keep tabs on the growth of your app, with an eye to staying under the 65,536 method-reference limit, and avoiding the headache of eliminating methods or enabling multidex. Usage \u00b6 Installation \u00b6 plugins { // make sure to apply an Android plugin *before* dexcount id \"com.getkeepsafe.dexcount\" } Or, if you prefer the legacy \u201capply plugin\u201d syntax: // in build.gradle buildscript { repositories { mavenCentral () } dependencies { classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:3.0.0-RC02' } } // in app/build.gradle // make sure this line comes *after* you apply the Android plugin apply plugin: 'com.getkeepsafe.dexcount' Execution \u00b6 When applied, dexcount-gradle-plugin will create one task per Android variant that you can execute to produce method-count reports. The tasks are named according the variant, in the format \u201ccount${variant}DexMethods\u201d. In a typical app, that means there will be tasks named countDebugDexMethods and countReleaseDexMethods . Historically, these counting tasks were run by default on every build; this continues to be true for projects using versions of Android Gradle Plugin from 3.4.0 up until 4.1.0. Beginning with 4.1.0, this is no longer the case, and method counts must be manually requested. Here\u2019s how to build and count an APK: # Build an APK and count its method references ./gradlew :app:countDebugDexMethods # Build an AAR and produce an approximate method count ./gradlew :lib:countDebugDexMethods # Build an App Bundle (.aab) and count its method references # (requires AGP 4.1.0 and above) ./gradlew :app:countDebugBundleDexMethods Sample output \u00b6 > ./gradlew assembleDebug ...buildspam... :app:compileDebugSources :app:preDexDebug UP-TO-DATE :app:dexDebug :app:packageDebug :app:zipalignDebug :app:assembleDebug Total methods in MyApp-debug.apk: 58930 (89.92% used) Total fields in MyApp-debug.apk: 27507 (41.97% used) Methods remaining in MyApp-debug.apk: 6605 Fields remaining in MyApp-debug.apk: 38028 BUILD SUCCESSFUL Total time: 33.017 secs Detailed method counts \u00b6 By default, a breakdown of method references by package and class will be written to a file under ${buildDir}/outputs/dexcount/${variant}/ . For example, an excerpt from our own app (in app/build/outputs/dexcount/debug/debug.txt ): methods fields package/class name 5037 1103 android.support.v4 29 1 android.support.v4.accessibilityservice 57 16 android.support.v4.animation 931 405 android.support.v4.app 87 31 android.support.v4.content 139 12 android.support.v4.graphics 116 11 android.support.v4.graphics.drawable 74 9 android.support.v4.internal 74 9 android.support.v4.internal.view 194 35 android.support.v4.media 11 0 android.support.v4.media.routing 156 26 android.support.v4.media.session Snapshot Builds \u00b6 We host snapshots in the Sonatype OSS repo. They are updated on each commit. As snapshots, they are inherently unstable - use at your own risk! To use them, add the Sonatype Snapshot repo to your repositories: buildscript { repositories { // other repos should come first maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:3.0.0-SNAPSHOT' } }","title":"Overview"},{"location":"#usage","text":"","title":"Usage"},{"location":"#installation","text":"plugins { // make sure to apply an Android plugin *before* dexcount id \"com.getkeepsafe.dexcount\" } Or, if you prefer the legacy \u201capply plugin\u201d syntax: // in build.gradle buildscript { repositories { mavenCentral () } dependencies { classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:3.0.0-RC02' } } // in app/build.gradle // make sure this line comes *after* you apply the Android plugin apply plugin: 'com.getkeepsafe.dexcount'","title":"Installation"},{"location":"#execution","text":"When applied, dexcount-gradle-plugin will create one task per Android variant that you can execute to produce method-count reports. The tasks are named according the variant, in the format \u201ccount${variant}DexMethods\u201d. In a typical app, that means there will be tasks named countDebugDexMethods and countReleaseDexMethods . Historically, these counting tasks were run by default on every build; this continues to be true for projects using versions of Android Gradle Plugin from 3.4.0 up until 4.1.0. Beginning with 4.1.0, this is no longer the case, and method counts must be manually requested. Here\u2019s how to build and count an APK: # Build an APK and count its method references ./gradlew :app:countDebugDexMethods # Build an AAR and produce an approximate method count ./gradlew :lib:countDebugDexMethods # Build an App Bundle (.aab) and count its method references # (requires AGP 4.1.0 and above) ./gradlew :app:countDebugBundleDexMethods","title":"Execution"},{"location":"#sample-output","text":"> ./gradlew assembleDebug ...buildspam... :app:compileDebugSources :app:preDexDebug UP-TO-DATE :app:dexDebug :app:packageDebug :app:zipalignDebug :app:assembleDebug Total methods in MyApp-debug.apk: 58930 (89.92% used) Total fields in MyApp-debug.apk: 27507 (41.97% used) Methods remaining in MyApp-debug.apk: 6605 Fields remaining in MyApp-debug.apk: 38028 BUILD SUCCESSFUL Total time: 33.017 secs","title":"Sample output"},{"location":"#detailed-method-counts","text":"By default, a breakdown of method references by package and class will be written to a file under ${buildDir}/outputs/dexcount/${variant}/ . For example, an excerpt from our own app (in app/build/outputs/dexcount/debug/debug.txt ): methods fields package/class name 5037 1103 android.support.v4 29 1 android.support.v4.accessibilityservice 57 16 android.support.v4.animation 931 405 android.support.v4.app 87 31 android.support.v4.content 139 12 android.support.v4.graphics 116 11 android.support.v4.graphics.drawable 74 9 android.support.v4.internal 74 9 android.support.v4.internal.view 194 35 android.support.v4.media 11 0 android.support.v4.media.routing 156 26 android.support.v4.media.session","title":"Detailed method counts"},{"location":"#snapshot-builds","text":"We host snapshots in the Sonatype OSS repo. They are updated on each commit. As snapshots, they are inherently unstable - use at your own risk! To use them, add the Sonatype Snapshot repo to your repositories: buildscript { repositories { // other repos should come first maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:3.0.0-SNAPSHOT' } }","title":"Snapshot Builds"},{"location":"ci/","text":"Use with Jenkins Plot Plugin \u00b6 A common use-case is to plot method and field counts across builds. The Jenkins Plot plugin is a general-purpose tool that graphs per-build scalar values through time. It reads java .properties files, CSV files, and XML files. Dexcount generates two files for each variant - a full package list, and a summary CSV file. The summary file is usable as-is with the Jenkins Plot Plugin. You can find it in app/build/outputs/dexcount/variant/summary.csv (note the .csv extension). Consult the plugin documentation for details on how to configure it. Use with Team City \u00b6 Common case is to enable integration with teamCityIntegration option and add custom statistic graphs in Team City. Key name is generated by pattern DexCount_${variant}_ClassCount , DexCount_${variant}_MethodCount and DexCount_${variant}_FieldCount Technically special strings like ##teamcity[buildStatisticValue key='DexCount_universalDebug_MethodCount' value='62362'] will be printed. More about integration in Team City doc If you have multiple products within one project using Dexcount, the default stat names will conflict with each other. In this case, the teamCitySlug configuration option can be useful. It is a string that, if specified, will be added to stat names according to the following scheme: DexCount_${teamCitySlug}_${variant}_${statName} . Note that you can assign a dynamically-evaluated property, e.g. teamCitySlug = project.name .","title":"CI"},{"location":"ci/#use-with-jenkins-plot-plugin","text":"A common use-case is to plot method and field counts across builds. The Jenkins Plot plugin is a general-purpose tool that graphs per-build scalar values through time. It reads java .properties files, CSV files, and XML files. Dexcount generates two files for each variant - a full package list, and a summary CSV file. The summary file is usable as-is with the Jenkins Plot Plugin. You can find it in app/build/outputs/dexcount/variant/summary.csv (note the .csv extension). Consult the plugin documentation for details on how to configure it.","title":"Use with Jenkins Plot Plugin"},{"location":"ci/#use-with-team-city","text":"Common case is to enable integration with teamCityIntegration option and add custom statistic graphs in Team City. Key name is generated by pattern DexCount_${variant}_ClassCount , DexCount_${variant}_MethodCount and DexCount_${variant}_FieldCount Technically special strings like ##teamcity[buildStatisticValue key='DexCount_universalDebug_MethodCount' value='62362'] will be printed. More about integration in Team City doc If you have multiple products within one project using Dexcount, the default stat names will conflict with each other. In this case, the teamCitySlug configuration option can be useful. It is a string that, if specified, will be added to stat names according to the following scheme: DexCount_${teamCitySlug}_${variant}_${statName} . Note that you can assign a dynamically-evaluated property, e.g. teamCitySlug = project.name .","title":"Use with Team City"},{"location":"config/","text":"Dexcount is configurable via a Gradle extension (shown with default values): in app/build.gradle : dexcount { // When false, no build outputs will be counted. Defaults to true. enabled = true // The format of the method count output, either \"list\", \"tree\", \"json\", // or \"yaml\". format = OutputFormat . LIST // When true, individual classes will be included in the package list - // otherwise, only packages are included. includeClasses = false // When true, the number of classes in a package will be included in the // printed output. includeClassCount = false // When true, the number of fields in a package or class will be included // in the printed output. includeFieldCount = true // When true, the total number of methods in the application will be included // in the printed output. includeTotalMethodCount = false // When true, packages will be sorted in descending order by the number of //methods they contain. orderByMethodCount = false // When true, the output file will also be printed to the build's standard // output. verbose = false // Sets the max number of package segments in the output - i.e. when set to 2, // counts stop at `com.google`, when set to 3 you get `com.google.android`, // etc. \"Unlimited\" by default. maxTreeDepth = Integer . MAX_VALUE // When true, Team City integration strings will be printed. teamCityIntegration = false // A string which, if specified, will be added to TeamCity stat names. // Null by default. teamCitySlug = null // When set, the build will fail when the APK/AAR has more methods than the // max. 0 by default. maxMethodCount = 64000 // When true, prints the declared method and field count. Only allowed in // library modules. False by default. printDeclarations = true }","title":"Options"}]}