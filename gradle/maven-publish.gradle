/*
 * Copyright 2019 Benjamin Bader
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "maven-publish"
apply plugin: "signing"

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : System.env.SONATYPE_NEXUS_USERNAME
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : System.env.SONATYPE_NEXUS_PASSWORD
}

def getRepositoryUrl() {
    return isReleaseBuild()
        ? "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def hasDeploymentTask(Project project) {
    def deploymentTasks = [
        "publishPlugins",
        "publish"
    ]
    deploymentTasks.any { project.gradle.taskGraph.hasTask(it) }
}

task sourceJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokka) {
    archiveClassifier.set("javadoc")
    from dokka.outputDirectory
}

publishing {
    publications {
        maven(MavenPublication) { MavenPublication p ->
            p.groupId = GROUP
            p.artifactId = POM_ARTIFACT_ID
            p.version = VERSION_NAME

            p.from components.java
            p.artifact sourceJar
            p.artifact javadocJar

            p.pom { pom ->
                pom.name.set(POM_NAME)
                pom.packaging = POM_PACKAGING
                pom.description.set(POM_DESCRIPTION)
                pom.url.set(POM_URL)

                pom.scm { scm ->
                    scm.url.set(POM_SCM_URL)
                    scm.connection.set(POM_SCM_CONNECTION)
                    scm.developerConnection.set(POM_SCM_DEV_CONNECTION)
                }

                pom.licenses { licenses ->
                    licenses.license { license ->
                        license.name.set(POM_LICENSE_NAME)
                        license.url.set(POM_LICENSE_URL)
                        license.distribution.set(POM_LICENSE_DIST)
                    }
                }

                pom.developers { devs ->
                    devs.developer { dev ->
                        dev.id.set(POM_DEVELOPER_ID)
                        dev.name.set(POM_DEVELOPER_NAME)
                    }

                    devs.developer { dev ->
                        dev.id.set("benjamin-bader")
                        dev.name.set("Ben Bader")
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = getRepositoryUrl()
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

signing {
    required { isReleaseBuild() && hasDeploymentTask(project) }
    sign project.publishing.publications.maven
}

// At the moment, signing kotlin metadata fails with a Gradle error for snapshots.
// To work around, we'll need to suppress signing for them, which is different from
// 'signing.required = false'.
tasks.withType(Sign) {
    onlyIf { isReleaseBuild() && hasDeploymentTask(project) }
}
